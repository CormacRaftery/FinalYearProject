FinalYearProject
By Cormac Raftery G00348802

Abstract
This dissertation is based on the project ‘FinalYearProject’, which was completed as part of the module
‘Applied Project and Minor Dissertation’ by Cormac Raftery. This project is a recreation of the board game 'Khet' in unity. 
This project connects a local unity executable with an online database and allows players to play on a locally hosted server.
An objective of this project was to gain an understanding of the complexities behind connecting users that are not using the 
same system in real time and to further my own knowledge in games development.
An agile approach was taken to develop a system that uses a mongoDB database that can be consumed by a unity programme.
This project has been developed fully by Cormac Raftery with ID number G00348802. The project source
code may be found on the Github Repository:  


Parent Objectives
1. Gain a better understanding of gaming development.
2. Create a system capable of hosting an online lobby.
3. Create a user-friendly interface.
4. Integrate a feature to allow a player to join from a different system.
5. Authentication that’s simple to use but secure.
6. Develop skills working with agile methodology.
7. Have all statistics for each player recorded across games.

Methodology
This project was developed using the agile methodology. Before each feature was added there was a
planning and design phase, the feature was then tested before moving to the next feature. 

Database Design
Once the base idea for the project was selected; a database could be designed. It was looked at what
information would need to be saved in the database that could potentially apply to a player.
Once this simple database wireframe was set up, it was possible to write queries against the mock data
to ensure that the database server was working as expected and that the data could be interacted with.
With a back-end wireframe up and running, and that it could perform CRUD operations on very simple
data using all of the required technologies.
This involved creating methods that could perform the HTTP GET and HTTP POST transactions with the
data in the database.
Now that it was verified that a front to back end wireframe was in place and working correcting it was
felt that sufficient research and experimentation had been conducted and now sprints to begin building
on this wireframe could begin.

Hosting and Web Navigation
////////////////////////////////////////////

Technology Review
This section is comprised of an in-depth view of all the technologies used throughout the project.

Data Tier
MongoDB
MongoDB is a cross-platform document-oriented database that provides high performance and is easily
scalable. MongoDB is perfect for applications that involve working with very large amounts of data, or
where the database needs to be easily scalable. One of the main issues with relational databases (such
as MySQL), is that it becomes complicated beyond practicality when the database needs to be scaled.
This is because many relational databases were designed to run on a single server as opposed to
MongoDB which has been built to scale horizontally. This is a major bottleneck in the world of
computing in the age of nearly ginormous data. Big data projects naturally require the data layer to have
the ability to scale up and scale out as per demands. This is why NoSQL solutions really seem to be on
the rise. MongoDB is one of the most popular and easy to use NoSQL databases. The main reason that
MongoDB was chosen as the database technology for this project is because it was believed that
MongoDB has and will become increasingly popular and influential in the coming years. Another reason
MongoDB was chosen, is because of the fact that prior to the development of this project, the developer
had little experience with MongoDB, and thought that it would be crucial to be able to use this
technology with ease when working with industry projects.

Afterthoughts
MongoDB proved to be very easy to get set up with and use. The syntax used to read and write
MongoDB is called BSON. BSON is also known as “binary JSON” and is very human readable (Looks very
similar to JSON syntax). MongoDB worked well with this project, as all it involved was having a different
collection for each of the different categories of data in the application. Another reason it fit really well
with this project, is because of the fact that this project utilized JSON syntax for transferring the data
over HTTP. This meant that the data looked almost the same in transition as it did in the database,
making manual inspection of the web service much easier. 

Logic Tier

Presentation Tier
///////////////////////////////////////////////////////change languages
Languages 
C Sharp
C# is a general-purpose, modern and object-oriented programming language pronounced as “C sharp”. It was developed by Microsoft led by Anders Hejlsberg and his team within the .Net initiative and was approved by the European Computer Manufacturers Association (ECMA) and International Standards Organization (ISO). C# is among the languages for Common Language Infrastructure and the current version of C# is version 7.2. C# is a lot similar to Java syntactically and is easy for the users who have knowledge of C, C++ or Java.

A bit about .Net Framework
.Net applications are multi-platform applications and framework can be used from languages like C++, C#, Visual Basic, COBOL etc. It is designed in a manner so that other languages can use it.
know more about .Net Framework

Why C#?

C# has many other reasons for being popular and in demand. Few of the reasons are mentioned below:

Easy to start: C# is a high-level language so it is closer to other popular programming languages like C, C++, and Java and thus becomes easy to learn for anyone.
Widely used for developing Desktop and Web Application: C# is widely used for developing web applications and Desktop applications. It is one of the most popular languages that is used in professional desktop. If anyone wants to create Microsoft apps, C# is their first choice.
Community:The larger the community the better it is as new tools and software will be developing to make it better. C# has a large community so the developments are done to make it exist in the system and not become extinct.
Game Development: C# is widely used in game development and will continue to dominate. C# integrates with Microsoft and thus has a large target audience. The C# features such as Automatic Garbage Collection, interfaces, object-oriented, etc. make C# a popular game developing language.
//////////////////////////////////////////////////////////////////////

Development tools

Git/Github

Git is an open-source version control system that was started by the same man who created Linux; Linus
Torvalds. Git is considered, by many, to be the most preferred version control system on the market. A
Git ”Repository” is simply a directory on a machine that is being tracked by Git. Any changes made to
any of the files in this directory can be ”added” and then ”committed” to the repository. The users have
control over what files get added, committed or even tracked by Git within that repository. GitHub is a
web-based hosting service for version control using Git. Users of Git can create remote versions of their
Git repository and ”push” changes made in their local repository to the remote repository on the Github
servers. Github has multiple useful features including a nice graphical user interface, in contrast to the
Git command-line tool. Git is also one of the most popular version control systems in industry. Git is
used in nearly every module in the software development course and it is obvious why.

Development environment

Visual Studio 

Visual Studio is a very popular IDE developed by Microsoft. Visual Studio provides support for
debugging, embedded Git control, syntax highlighting, intelligent code completion, and more. Visual
Studio was selected as the source code editor for the project. 

/////////////////////////////////////unity as a development environment

Conclusion

To conclude, the developer was relatively content with the outcome of the project. While the project
did not reach all its original goals, it still provided basic functionality for a scheduling system. The
developer believes that they have failed massively in the security aspect and would be interested
expanding their knowledge in web app security. The developer also believes that working in a team
would prove much more beneficial in terms of learning how to communicate and use methodologies
more efficiently. The developer believes that they succeeded in reaching the following goals:
1. Gain a better understanding of full stack development.
2. Create a system capable of hosting a scheduling website for employers.
3. Create a user-friendly interface.
4. Integrate a feature to allow an employer to add/edit/delete employees.
5. Allow employees to easily view their schedule.
6. Allow employers only to edit the schedule.
With the above in mind, it can be concluded that most of the initial objectives for this project were met
in some capacity or another.

Learning Outcomes

After completing this project there was a lot of knowledge gained. Particularily connecting a local programme to an online database and between connecting users. Prior to this project, the developer had a basic knowledge of working with 

The developer senses that experience with  will help them in future industry
projects, in particular working with full stack development projects.

The developer senses that experience with MEAN stack development will help them in future industry
projects, in particular working with full stack development projects. Prior to this project, the developer
had a basic knowledge of the individual components of full stack development. This knowledge has been
refined as the team got more practical exposure to the complexities behind creating a full stack
application. The developer had the opportunity to improve their skills in multiple domains of
development, such as database management, server configuration, client-side development and system
architecture. This experience also exposed the gaps in the developer’s knowledge such as system
security. Going forward, the developer intends to pursue a more in-depth knowledge about this topic.
All aspects of this final year project have challenged the developer in terms of research, development,
and self-discipline.

Appendix

Source code link to github - 
Link to video demonstrating the project -

Bibliography